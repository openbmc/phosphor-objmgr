{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ac05c0b1_306379d5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-19T17:42:13Z",
      "side": 1,
      "message": "Why is that a problem?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 28,
        "endChar": 19
      },
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b97c744_6ccd1bc0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-10-21T12:17:02Z",
      "side": 1,
      "message": "Probably not really invalid, but it\u0027s discouraged for a service to implement no interface on an object path due to the implications it has for usability and clarity in communication between services.\n\nFor example, bmcweb will give error on such case: https://github.com/openbmc/bmcweb/blob/master/include/openbmc_dbus_rest.hpp#L1752-L1758\nbecause we usually assume that an object shall implement as least one interface.",
      "parentUuid": "ac05c0b1_306379d5",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 28,
        "endChar": 19
      },
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9631b29_e3f2f4f9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-29T04:33:49Z",
      "side": 1,
      "message": "so lets just fix that in bmcweb?  That check seems like an issue regardless",
      "parentUuid": "3b97c744_6ccd1bc0",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 28,
        "endChar": 19
      },
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "531e188c_8f8bc343",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-10-30T02:56:16Z",
      "side": 1,
      "message": "I am not sure.\nI will send a mail to the list to discuss if it\u0027s valid for a service to implement an object without any interface.",
      "parentUuid": "b9631b29_e3f2f4f9",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 28,
        "endChar": 19
      },
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab64af82_cd87d24b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-09-24T03:00:05Z",
      "side": 1,
      "message": "A \"weird\" issue is found during the test:\n\n```\n# busctl call xyz.openbmc_project.ObjectMapper /xyz/openbmc_project/software/c172a378/inventory org.freedesktop.DBus.Properties GetAll s org.freedesktop.DBus.Introspectable\na{sv} 0\n# busctl call xyz.openbmc_project.ObjectMapper /xyz/openbmc_project/software/c172a378 org.freedesktop.DBus.Properties GetAll s org.freedesktop.DBus.Introspectable\nCall failed: Unknown object \u0027/xyz/openbmc_project/software/c172a378\u0027.\n# busctl call xyz.openbmc_project.ObjectMapper /xyz/openbmc_project/software/c172a378 org.freedesktop.DBus.Peer GetMachineId\ns \"a9af6f883ddf45289683c9583541a5ba\"\n```\n\n\n1. mapper does implement `/xyz/openbmc_project/software/c172a378/inventory` object, and on this object, it\u0027s OK to call `org.freedesktop.DBus.Properties`\u0027s method `GetAll`.\n2. mapper does not implement the object `/xyz/openbmc_project/software/c172a378`, this is just the parent of `/xyz/openbmc_project/software/c172a378/inventory`. On this object, it fails to call `org.freedesktop.DBus.Properties`\u0027s method  `GetAll`.\n3. On the above object path, it\u0027s OK to call `org.freedesktop.DBus.Peer` interface\u0027s method `GetMachineId`.\n\n\n* For 1 \u0026 3, it\u0027s expected behavior;\n* For 2, it looks like some bug?",
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be363348_fc031b83",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-24T03:38:13Z",
      "side": 1,
      "message": "\u003e A \"weird\" issue is found during the test:\n\u003e \n\u003e ```\n\u003e # busctl call xyz.openbmc_project.ObjectMapper /xyz/openbmc_project/software/c172a378/inventory org.freedesktop.DBus.Properties GetAll s org.freedesktop.DBus.Introspectable\n\u003e a{sv} 0\n\u003e # busctl call xyz.openbmc_project.ObjectMapper /xyz/openbmc_project/software/c172a378 org.freedesktop.DBus.Properties GetAll s org.freedesktop.DBus.Introspectable\n\u003e Call failed: Unknown object \u0027/xyz/openbmc_project/software/c172a378\u0027.\n\u003e # busctl call xyz.openbmc_project.ObjectMapper /xyz/openbmc_project/software/c172a378 org.freedesktop.DBus.Peer GetMachineId\n\u003e s \"a9af6f883ddf45289683c9583541a5ba\"\n\u003e ```\n\u003e \n\u003e \n\u003e 1. mapper does implement `/xyz/openbmc_project/software/c172a378/inventory` object, and on this object, it\u0027s OK to call `org.freedesktop.DBus.Properties`\u0027s method `GetAll`.\n\u003e 2. mapper does not implement the object `/xyz/openbmc_project/software/c172a378`, this is just the parent of `/xyz/openbmc_project/software/c172a378/inventory`. On this object, it fails to call `org.freedesktop.DBus.Properties`\u0027s method  `GetAll`.\n\u003e 3. On the above object path, it\u0027s OK to call `org.freedesktop.DBus.Peer` interface\u0027s method `GetMachineId`.\n\u003e \n\u003e \n\u003e * For 1 \u0026 3, it\u0027s expected behavior;\n\u003e * For 2, it looks like some bug?\n\n\nWhy do we care if we can call GetAll on an interface that has no properties?  So long as the interfaces that have properties respond correctly respond correctly, we should be good.\n\nI don\u0027t think anything using the mapper uses any of these 3 interfaces, so I suspect we can just omit them.",
      "parentUuid": "ab64af82_cd87d24b",
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91d0e034_b4f5e910",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-09-24T16:34:22Z",
      "side": 1,
      "message": "Lets keep this patch focused on interfaces that are actually used.  I wouldn\u0027t expect any implementation to use the mapper to look up the existence of org.freedesktop.DBus.Introspectable or org.freedesktop.DBus.Peer",
      "parentUuid": "be363348_fc031b83",
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b50a03e8_fba51e41",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-09-30T02:32:50Z",
      "side": 1,
      "message": "The use case is in bmcweb\u0027s REST API, see https://gerrit.openbmc.org/c/openbmc/bmcweb/+/74593, that calls `GetAll()`, reads all the properties from every interface, and fails on the \"default\" interfaces.\nFor example if user uses REST API to GET `https://$bmc//xyz/openbmc_project/software/c172a378`, it does get all the properties in the response, but in BMC\u0027s journal log, it gets below error:\n```\nCall failed: Unknown object \u0027/xyz/openbmc_project/software/c172a378\u0027\n```",
      "parentUuid": "91d0e034_b4f5e910",
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45f633d4_3b6d16d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-10-19T17:41:24Z",
      "side": 1,
      "message": "If we don\u0027t return the default interfaces, bmcweb will never call them, right?",
      "parentUuid": "b50a03e8_fba51e41",
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abb92abe_9e1fade9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-10-21T12:17:02Z",
      "side": 1,
      "message": "In such case, bmcweb responses with error at https://github.com/openbmc/bmcweb/blob/master/include/openbmc_dbus_rest.hpp#L1754, so we get error as well.",
      "parentUuid": "45f633d4_3b6d16d0",
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28ccfeea_19f3fa29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-01-04T00:26:34Z",
      "side": 1,
      "message": "I would like to see this merge.  I\u0027m the one that wrote the code being changed, and it\u0027s not only incorrect, it\u0027s inconsistent dependent on whether you hit the \"new\" interface paths or the \"existing\" interface paths.\n\nI would like to understand (in terms of a user facing interface) what is broken if this merges.  I don\u0027t see anything that would be broken.",
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44c8c55e_6e25cd23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-01-04T01:47:44Z",
      "side": 1,
      "message": "Can we get a better explaination of what the problem is and what the fix is doing.  I don\u0027t understand from the code change or commit message what any of this is doing.  \"defaultInterfaces\" is not super descriptive and now it is empty; why aren\u0027t we just removing it entirely?",
      "parentUuid": "28ccfeea_19f3fa29",
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "779e4857_d14ea008",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-01-07T00:24:15Z",
      "side": 1,
      "message": "This removes registering the default interfaces (peer, properties, Introspectable) when done as part of an ObjectManager event, because they\u0027re generally not received as part of an InterfacesAdded call.  These don\u0027t generally get searched on, and don\u0027t make a ton of sense to have the mapper implicitly add, but were done to make the introspect and objectmapper results match.\n\nKeep in mind that the GetManagedObjects path doesn\u0027t add these implicit interfaces, so if you reboot the mapper, it will cache a different result than if it starts up with the system.  Either way we decide, we\u0027re broken in some way.\n\n\n@mine260309@gmail.com is this something you\u0027d like to type up in the commit message?  If so, go ahead, if not I\u0027m happy to update it or move to another patch.\n\nFWIW, this was a bug I found a few years ago when trying to do comparisons of a different mapper implementation.  It doesn\u0027t really impact the user aside from causing the mapper to take more memory and be inconsistent between startup and restart.",
      "parentUuid": "44c8c55e_6e25cd23",
      "revId": "c8ae58687614946882dfafc1791b353aa60825e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}