{
  "comments": [
    {
      "key": {
        "uuid": "a691b292_847dfe8a",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-03-24T21:54:28Z",
      "side": 1,
      "message": "just curious, what is it that is specifically causing EBADR to be returned?",
      "range": {
        "startLine": 183,
        "startChar": 34,
        "endLine": 183,
        "endChar": 39
      },
      "revId": "12d735a8f025188f64e32bd3b7facbdde584ac42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "837f9c79_c9033eef",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-03-24T22:02:30Z",
      "side": 1,
      "message": "In my case, phosphor-pid-control has a little chance registering the dbus later than ObjectMapper introspection. then: \n\nphosphor-mapper[372]: Introspect call failed with error: generic:53, Invalid request descriptor on process: xyz.openbmc_project.Hwmon.external path: /",
      "parentUuid": "a691b292_847dfe8a",
      "range": {
        "startLine": 183,
        "startChar": 34,
        "endLine": 183,
        "endChar": 39
      },
      "revId": "12d735a8f025188f64e32bd3b7facbdde584ac42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a15e64df_77131b04",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-03-24T23:50:17Z",
      "side": 1,
      "message": "Why does it have this chance? Should it have a different construction ordering?",
      "parentUuid": "837f9c79_c9033eef",
      "range": {
        "startLine": 183,
        "startChar": 34,
        "endLine": 183,
        "endChar": 39
      },
      "revId": "12d735a8f025188f64e32bd3b7facbdde584ac42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13f5fc6b_5ada13cf",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-03-25T17:00:56Z",
      "side": 1,
      "message": "The construction order remains the same as before. It is execution speed. there is no guarantee of dbus registration ahead of access though the services are scheduled in that order (i.e. pid-control is initiated before ObjectMapper), since there is no synchronization between processes.",
      "parentUuid": "a15e64df_77131b04",
      "range": {
        "startLine": 183,
        "startChar": 34,
        "endLine": 183,
        "endChar": 39
      },
      "revId": "12d735a8f025188f64e32bd3b7facbdde584ac42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5413ae46_8dd4cb68",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-03-25T17:42:39Z",
      "side": 1,
      "message": "No, the error is caused by the object manager being instantiated after the name is requested. You wouldn\u0027t have the race condition if you re-ordered it on the other side.\n\nThere is no object manager added before this line for the hostBus\nhttps://github.com/openbmc/phosphor-pid-control/blob/b6a0b89e4419aeef4a2cdfde1a9119ae6b9be25f/main.cpp#L260\n\nYou can see that the object manager gets added after this line, which is why the mapper hits this error.",
      "parentUuid": "13f5fc6b_5ada13cf",
      "range": {
        "startLine": 183,
        "startChar": 34,
        "endLine": 183,
        "endChar": 39
      },
      "revId": "12d735a8f025188f64e32bd3b7facbdde584ac42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28ff13a1_0479f109",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-03-25T23:25:15Z",
      "side": 1,
      "message": "You are right about the instantiation sequence of ObjectMapper and pid-control. I was confused about that before. But this fix should stand still. \n\n\u003e No, the error is caused by the object manager being instantiated after the name is requested. \nThis statement is correct, partially. A more precise description is: introspect from mapper is triggered after name request but BEFORE object add. \n\nThe correct event chain is: \nmapper start -\u003e pid start -\u003e pid name request -\u003e mapper handler trigger ~\u003d pid add object -\u003e mapper introspect\n\nWhen error happens: \nmapper start -\u003e pid start -\u003e pid name request -\u003e mapper handler trigger -\u003e mapper introspect -\u003e pid add object. \n\nMapper have no control over the time interval between name-request and object-add within other process. The issue is currently more observable since pid introduced longer delay in between by accident. But it is safer to have such retry mechanism here in ObjectMapper.",
      "parentUuid": "5413ae46_8dd4cb68",
      "range": {
        "startLine": 183,
        "startChar": 34,
        "endLine": 183,
        "endChar": 39
      },
      "revId": "12d735a8f025188f64e32bd3b7facbdde584ac42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebdb8337_1edc6bc9",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-03-26T00:25:34Z",
      "side": 1,
      "message": "I should correct what I said before, this call is for Introspection, not for GetManagedObjects. this actually has nothing to do with the ObjectMapper and when it gets added to the object.\n\nThat being said, it seems like we need to define the appropriate behavior for the object manager here. I don\u0027t think you should retry if the root object of a services doesn\u0027t implement the introspectable interface. It\u0027s not reasonable to believe that a named service has to own any objects immediately, and we don\u0027t want to block all users of the mapper waiting around for a service to become introspectable. It seems reasonable to expect that a service which already requested a name would add an object manager prior to instantiating objects so that they emit InterfacesAdded. Alternatively, they would just request the name a second time to trigger the objmanager to look them up again.",
      "parentUuid": "28ff13a1_0479f109",
      "range": {
        "startLine": 183,
        "startChar": 34,
        "endLine": 183,
        "endChar": 39
      },
      "revId": "12d735a8f025188f64e32bd3b7facbdde584ac42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf56b624_9f094aac",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-03-26T01:14:17Z",
      "side": 1,
      "message": "Sorry for mixing object mapper and obj manager. The obj manager code is under bin name of mapperx. \n\n\u003e It seems reasonable to expect that a service which already requested a name would add an object manager prior to instantiating objects so that they emit InterfacesAdded. Alternatively, they would just request the name a second time to trigger the objmanager to look them up again.\n\nIf we can make the obligation of what you said, the retry here, of course, makes no sense. But pid-control is obviously not in that case. Otherwise we wouldn\u0027t have seen the error. pid-control seems following \"name request\" - \"soon enough\" - \"init object\" pattern. \n\nThe question is whether we want to make such obligation or we want to make a objmanager lenient enough for its customers. \n\n\u003e and we don\u0027t want to block all users of the mapper waiting around for a service to become introspectable\n\nI am not comfortable with the sleep either, given no matter how small the sleep time is. I would turn to a delayed timer (or yeild_until kind-of function of coroutine) so other client can continue the io_context, if we really want such a fix.",
      "parentUuid": "ebdb8337_1edc6bc9",
      "range": {
        "startLine": 183,
        "startChar": 34,
        "endLine": 183,
        "endChar": 39
      },
      "revId": "12d735a8f025188f64e32bd3b7facbdde584ac42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a15f277_32e98c64",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-03-26T13:36:40Z",
      "side": 1,
      "message": "\u003e The question is whether we want to make such obligation or we want to make a objmanager lenient enough for its customers. \n\nThis is a great succinct statement of the problem, thank you.  Creating the object manager after claiming a name violates the principle of least astonishment IMHO, so my vote would be for the former.",
      "parentUuid": "bf56b624_9f094aac",
      "range": {
        "startLine": 183,
        "startChar": 34,
        "endLine": 183,
        "endChar": 39
      },
      "revId": "12d735a8f025188f64e32bd3b7facbdde584ac42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b4aee67_8b9a1f26",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-03-29T21:30:21Z",
      "side": 1,
      "message": "Since both Walliam and Brad vote for the former design philosophy, I will abandon the fix on objmgr side and leave the duty on phosphor-pid-control (and other clients).",
      "parentUuid": "4a15f277_32e98c64",
      "range": {
        "startLine": 183,
        "startChar": 34,
        "endLine": 183,
        "endChar": 39
      },
      "revId": "12d735a8f025188f64e32bd3b7facbdde584ac42",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}