{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fe5553fb_5bbbf783",
        "filename": "meson.build",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2025-08-01T16:34:59Z",
      "side": 1,
      "message": "Is it worthwhile making this dependent on unit-failure-monitor being configured and moving the dep in the recipe to the packageconfig?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "5762276ab6ff7bd2edc77ad9e890594777f9113f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f78e654d_5544333d",
        "filename": "meson.build",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2025-08-01T18:21:38Z",
      "side": 1,
      "message": "Both apps need logging of some kind or another.  mapperx just uses stderr and that seems good enough?  I\u0027d be more inclined to just change unit-failure-monitor to log to stderr (and thus the journal) and be rid of the dependency completely.  What do you think?",
      "parentUuid": "fe5553fb_5bbbf783",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "5762276ab6ff7bd2edc77ad9e890594777f9113f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee8da367_d3bd8e6d",
        "filename": "meson.build",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2025-08-01T18:30:25Z",
      "side": 1,
      "message": "Let\u0027s not go backwards, openbmc went all in on our journal wrappers.  Probably we should really convert both to lg2.",
      "parentUuid": "f78e654d_5544333d",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "5762276ab6ff7bd2edc77ad9e890594777f9113f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4df3dae4_e8fc775a",
        "filename": "meson.build",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2025-08-04T14:16:36Z",
      "side": 1,
      "message": "\u003e Probably we should really convert both to lg2.\n\nYeah I dunno.  I can understand where you are coming from but I have a different take.  The journal wrappers exist to enable structured logging, which exists to enable post processing / log mining.  But I\u0027ve never actually heard anyone say they have that use case.\n\nEven if there is such a user, we should be selective in where we use structured logging and not indiscriminately apply it everywhere.  I can understand wanting to know about i2c communication errors for example, and one way to accomplish that would be with structured logging.  But not for the sort of thing the mapper logs:\n\n ```\n std::cerr \u003c\u003c \"Illegal association found on \" \u003c\u003c wellKnown\n std::cerr \u003c\u003c \"Error getting owner of \" \u003c\u003c newObject \u003c\u003c \" : \"\n std::cerr \u003c\u003c \"Error getting associations from \" \u003c\u003c path \u003c\u003c \"\\n\";\n std::cerr \u003c\u003c \"Introspect call failed with error: \" \u003c\u003c ec \u003c\u003c \", \"\n std::cerr \u003c\u003c \"XML parsing failed\\n\";\n std::cerr \u003c\u003c \"XML document did not contain any data\\n\";\n std::cerr \u003c\u003c \"Error getting names: \" \u003c\u003c ec \u003c\u003c \"\\n\";\n std::cerr \u003c\u003c \"Found invalid association on path \" \u003c\u003c path \u003c\u003c \"\\n\";\n std::cerr \u003c\u003c \"Error adding association: assocPath \" \u003c\u003c assocPath\n ```\n \nI don\u0027t think half of these can\u0027t even happen without bugs in low-level libraries or memory corruption (which should trigger a crash, not a log entry).\n\nMy main gripe with lg2 is that it has too much surface area for a universal dependency.  Maybe things have stabilized in the last couple years but to illustrate what I mean, whenever there is a change in the phosphor-logging daemon it causes half the project (as any OpenBMC userspace with a dependency on phosphor-logging) to be rebuilt.  If I have to pick between better build structure and structured logging for these handful of mapper errors... I pick better build structure any day of the week.",
      "parentUuid": "ee8da367_d3bd8e6d",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "5762276ab6ff7bd2edc77ad9e890594777f9113f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}