{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0887725c_3d0a6549",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-12-10T14:53:34Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 10,
        "startChar": 19,
        "endLine": 10,
        "endChar": 22
      },
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c9b0475_f2340003",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1001371
      },
      "writtenOn": "2024-12-11T20:56:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0887725c_3d0a6549",
      "range": {
        "startLine": 10,
        "startChar": 19,
        "endLine": 10,
        "endChar": 22
      },
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b55f27f_d62d2f9b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-12-10T22:51:16Z",
      "side": 1,
      "message": "This could stand to use a bit more of an elaboration.  I think it needs at least 10ms without a signal until it actually tries again?",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 18,
        "endChar": 24
      },
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d137c3a_65640d05",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-11T17:53:24Z",
      "side": 1,
      "message": "I think it would also be good to show some data on what this does for us.  How much does this improve?  Does it reduce BMC boot up time?",
      "parentUuid": "0b55f27f_d62d2f9b",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 18,
        "endChar": 24
      },
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f5f94ad_5bb7926e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1001371
      },
      "writtenOn": "2024-12-11T20:56:55Z",
      "side": 1,
      "message": "\u003e This could stand to use a bit more of an elaboration.\nThe 10ms here doesn\u0027t have any special meaning; it\u0027s just a very short time used to filter out excessive calls.\n\u003e I think it needs at least 10ms without a signal until it actually tries again?\nyes!\n\u003e How much does this improve?\nIn our system, there are 5 mappers waiting for some debugging from the entity manager. Some calculations have been made here that can reduce over 500 GetObject calls.\n\u003e Does it reduce BMC boot up time?\nupdate in commit.",
      "parentUuid": "2d137c3a_65640d05",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 18,
        "endChar": 24
      },
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b699086_e0205b1e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-01-17T19:19:09Z",
      "side": 1,
      "message": "\u003e \u003e This could stand to use a bit more of an elaboration.\n\u003e The 10ms here doesn\u0027t have any special meaning; it\u0027s just a very short time used to filter out excessive calls.\n\u003e \u003e I think it needs at least 10ms without a signal until it actually tries again?\n\u003e yes!\n\u003e \u003e How much does this improve?\n\u003e In our system, there are 5 mappers waiting for some debugging from the entity manager.\n\nmapper wait has never been a good way to write entity manager reactors.  Using a match expression in your application is how all the reactors should be operating, and said match expression can use the arg0 and arg0Namespace arguments to select only the configuration entries that their system cares about.\n\n\u003e Some calculations have been made here that can reduce over 500 GetObject calls.\n\u003e \u003e Does it reduce BMC boot up time?\n\u003e update in commit.",
      "parentUuid": "6f5f94ad_5bb7926e",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 18,
        "endChar": 24
      },
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c8e74bd_6dc47392",
        "filename": "libmapper/mapper.c",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-11T17:53:24Z",
      "side": 1,
      "message": "I\u0027m not super pleased that we lost the \"introspection_complete\" naming of these functions.",
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "762b7045_03cc1244",
        "filename": "libmapper/mapper.c",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1001371
      },
      "writtenOn": "2024-12-11T20:56:55Z",
      "side": 1,
      "message": "Both \"introspection_complete\" and \"interfaces added\" use this callback... so I think renaming it is feasible.",
      "parentUuid": "3c8e74bd_6dc47392",
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e47824cd_b82c9990",
        "filename": "libmapper/mapper.c",
        "patchSetId": 4
      },
      "lineNbr": 325,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-11T17:53:24Z",
      "side": 1,
      "message": "Is this somehow combining all the triggers together into one handle event?  Can we comment what the side-effects of this are better?",
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9126ee76_1a4da76a",
        "filename": "libmapper/mapper.c",
        "patchSetId": 4
      },
      "lineNbr": 325,
      "author": {
        "id": 1001371
      },
      "writtenOn": "2024-12-11T20:56:55Z",
      "side": 1,
      "message": "The previous behavior was also within the same handler... I believe there should be no side effects.",
      "parentUuid": "e47824cd_b82c9990",
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01449066_94b4e22b",
        "filename": "libmapper/mapper.c",
        "patchSetId": 4
      },
      "lineNbr": 325,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-12T14:55:40Z",
      "side": 1,
      "message": "How is the behavior the same?  You said that the main purpose of this commit was to reduce the pending async callbacks.  It looks like these lines do some magic to ensure that we are coalescing the callbacks in a 10ms window.  That was never done before.",
      "parentUuid": "9126ee76_1a4da76a",
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18fef996_99cadabe",
        "filename": "libmapper/mapper.c",
        "patchSetId": 4
      },
      "lineNbr": 325,
      "author": {
        "id": 1001371
      },
      "writtenOn": "2024-12-16T05:17:45Z",
      "side": 1,
      "message": "Sorry, maybe I didnâ€™t describe it clearly. What I meant was that two matches share the same callback.",
      "parentUuid": "01449066_94b4e22b",
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8699ec59_0e22a492",
        "filename": "libmapper/mapper.c",
        "patchSetId": 4
      },
      "lineNbr": 325,
      "author": {
        "id": 1001371
      },
      "writtenOn": "2024-12-16T05:19:36Z",
      "side": 1,
      "message": "At first, I wanted to match the InterfacesAdded path, but if the params like `mapper wait /xyz/openbmc_project/inventory/system/board`. In fact, this path doesn\u0027t emit any signals.\nLater, I considered that if we use a path namespace, such as a large namespace like this, it could still lead to excessive calls.\n\n* The current issue is that this wait operation makes mapperx overly busy, to the extent that some initialization processes occasionally fail unexpectedly.\n\nRegarding the current behavior:\nFrom a functional perspective, a one-shot delay in the overall logic shouldn\u0027t cause any issues. If it was retrievable before, it should still be retrievable now.\nFrom a real-time perspective, this delay might cause a slight delay in triggering. In extreme cases, for example, if we have 500 InterfacesAdded events, each stuck for 9ms, the first call might only happen after 4.5 seconds.\nHowever, without this delay, based on my observation of the startup process, the time taken could very well exceed 4.5 seconds.",
      "parentUuid": "18fef996_99cadabe",
      "revId": "e5ce3fe5fcf2552695eedf3c3e0ebe3ba599e802",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}